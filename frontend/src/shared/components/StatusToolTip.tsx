import { ColDef, ITooltipParams } from "ag-grid-community";
import { AgGridReact } from "ag-grid-react";
import { DashboardSample } from "../../generated/graphql";

export function getActionItemForMissingIgoField(fieldName: string): string {
  return (
    `PMs contact IGO to fix and redeliver, let SMILE know once ${fieldName} is updated by emailing` +
    ` them or clicking 'Mark delivery' button`
  );
}

export const SAMPLE_STATUS_MAP: StatusMap = {
  "baitSet missing": {
    item: "Baitset missing",
    description: "Baitset field does not have a value assigned in LIMS",
    actionItem: getActionItemForMissingIgoField("baitset"),
    responsibleParty: "IGO",
  },
  "fastQs missing": {
    item: "FASTQs missing",
    description: "FASTQs for sample were not sent to SMILE from IGO",
    actionItem: getActionItemForMissingIgoField("FASTQs"),
    responsibleParty: "IGO",
  },
  "igoComplete false": {
    item: "IGOComplete false",
    description: "IGOComplete checkbox was not ticked in LIMS",
    actionItem: getActionItemForMissingIgoField("IGOComplete"),
    responsibleParty: "IGO",
  },
  "sample type abbreviation could not resolve based on specimenType, sampleOrigin, or sampleClass":
    {
      item: "Sample type abbreviation not resolved",
      description:
        "Metadata required for CMO Sample Name generation is missing/ incomplete",
      actionItem: "PMs update metadata in SMILE PM dashboard",
      responsibleParty: "PMs",
    },
  "recipe missing": {
    item: "Recipe missing",
    description: "IGOComplete checkbox was not ticked in LIMS",
    actionItem: getActionItemForMissingIgoField("recipe"),
    responsibleParty: "IGO",
  },
  "normalizedPatientId missing from 'cmoSampleIdFields'": {
    item: "NormalizedPatientId missing",
    description:
      "NormalizedPatientId field does not have a value assigned in LIMS",
    actionItem: getActionItemForMissingIgoField("normalizedPatientId"),
    responsibleParty: "IGO",
  },
  "specimenType (sampleClass) invalid": {
    item: "Specimen Type (Sample Class) invalid",
    description:
      "The value for the IGO Specimen Type (SMILE Sample Class) is not recognized",
    actionItem: "PMs update Specimen Type in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "sampleType missing from 'cmoSampleIdFields'": {
    item: "Sample Type missing from 'cmoSampleIdFields'",
    description:
      "The label generator will fall back onto this field if the IGO Specimen Type (SMILE Sample Class) is not " +
      "missing or is not a recognized value. This field is auto generated by IGO as part of the sample metadata",
    actionItem: "PMs update Specimen Type in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "sampleType invalid 'sampleType' from 'cmoSampleIdFields'": {
    item: "Sample Type invalid in 'cmoSampleIdFields'",
    description:
      "The label generator will fall back onto this field if the IGO Specimen Type (SMILE Sample Class) is not " +
      "missing or is not a recognized value. This field is auto generated by IGO as part of the sample metadata",
    actionItem: "PMs update Specimen Type in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "investigatorSampleId missing": {
    item: "InvestigatorSampleId missing",
    description:
      "InvestigatorSampleId field does not have a value assigned in LIMS",
    actionItem: "PMs update InvestigatorSampleId in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "cmoPatientId missing": {
    item: "cmoPatientId missing",
    description: "cmoPatientId field does not have a value assigned in LIMS",
    actionItem: getActionItemForMissingIgoField("cmoPatientId"),
    responsibleParty: "IGO",
  },
  "igoId missing": {
    item: "IGO ID missing",
    description: "IGO ID field does not have a value assigned in LIMS",
    actionItem: getActionItemForMissingIgoField("igoId"),
    responsibleParty: "IGO",
  },
};

export type StatusItem = {
  item: string;
  description: string;
  actionItem: string;
  responsibleParty: string;
  sampleLevelHeader?: string;
};

/**
 * @Key Concatenated string of key-value pairs from validationReport field of Sample's Status in the database
 * to ensure unique keys for each status item in this map.
 * Example: given "fastQs=missing,igoComplete=false", we'd get "fastQs missing" and "igoComplete false".
 * Note: when querying this data from the database, handle both formats: JSON string and {key=value} string.
 *
 * @Value Actionable details for the PM team.
 */
export type StatusMap = {
  [key: string]: StatusItem;
};

/**
 * AG Grid data to use when a Sample/Request is missing a corresponding Status in the database.
 */
export const MISSING_STATUS: StatusItem[] = [
  {
    item: "Data error",
    description: "Validation status is missing from this sample",
    actionItem: "PMs contact the SMILE team",
    responsibleParty: "SMILE",
  },
];

const validationColDefs: ColDef[] = [
  {
    field: "item",
    headerName: "Item",
    width: 200,
  },
  {
    field: "description",
    headerName: "Description",
    width: 250,
  },
  {
    field: "actionItem",
    headerName: "Action Item",
    width: 250,
  },
  {
    field: "responsibleParty",
    headerName: "Responsible Party",
    width: 170,
  },
];

export const defaultColDef: ColDef = {
  wrapText: true,
  autoHeight: true,
  cellStyle: {
    wordBreak: "break-word",
    lineHeight: "1.25",
    padding: "6px 18px",
  },
};

export function parseValidationReport(
  validationReport: string
): Map<string, string> {
  const validationReportMap = new Map<string, string>();
  try {
    // Parse the validation report JSON string
    // e.g. "{"fastQs":"missing","igoComplete":"false"}"
    return new Map(Object.entries(JSON.parse(validationReport)));
  } catch (e) {
    // Parse the alternative format of the validation report data
    // e.g. "{fastQs=missing,igoComplete=false}"
    const keyValuePairs = validationReport.replace(/[{}]/g, "").split(",");
    for (const keyValuePair of keyValuePairs) {
      const [key, value] = keyValuePair.split("=").map((str) => str.trim());
      if (key && value) {
        validationReportMap.set(key, value);
      }
    }
    return validationReportMap;
  }
}

export function extractNestedValidationReport(
  validationReport: string
): string | null {
  try {
    // Try parsing as JSON first
    const parsed = JSON.parse(validationReport);
    if (parsed.samples?.[0]?.status?.validationReport) {
      return JSON.stringify(parsed.samples[0].status.validationReport);
    }
  } catch (e) {
    // If JSON parsing fails, try the alternative format
    // Example: {samples=[{status={validationReport={...}}]}
    const samplesMatch = validationReport.match(/samples=\[(.*?)\]/);
    if (samplesMatch) {
      const samplesContent = samplesMatch[1];
      const statusMatch = samplesContent.match(/status=\{(.*?)\}/);
      if (statusMatch) {
        const statusContent = statusMatch[1];
        const validationReportMatch = statusContent.match(
          /validationReport=\{(.*?)\}/
        );
        if (validationReportMatch) {
          return `{${validationReportMatch[1]}}`;
        }
      }
    }
  }
  return null;
}

export function StatusTooltip({ data }: ITooltipParams<DashboardSample>) {
  if (!data) {
    return null;
  }

  const { primaryId, validationReport, validationStatus, sampleCategory } =
    data;
  const validationDataForAgGrid: StatusItem[] = [];

  // Populate the validationDataForAgGrid with the validation report data
  if (validationStatus === false) {
    const validationReportMap = parseValidationReport(validationReport!);
    validationDataForAgGrid.push(
      ...Array.from(validationReportMap, ([fieldName, report]) => ({
        ...SAMPLE_STATUS_MAP[`${fieldName} ${report}`],
      }))
    );
    // Handle the case where a Sample is missing a corresponding Status in the database
  } else if (validationStatus === null && sampleCategory !== "clinical") {
    validationDataForAgGrid.push(...MISSING_STATUS);
  }

  if (validationDataForAgGrid.length === 0) {
    return null;
  }
  return (
    <div className="tooltip-styles">
      <p>Status report for {`${primaryId}`}</p>
      <div className="ag-theme-alpine" style={{ width: 880 }}>
        <AgGridReact
          rowData={validationDataForAgGrid}
          columnDefs={validationColDefs}
          defaultColDef={defaultColDef}
          domLayout="autoHeight"
        ></AgGridReact>
      </div>
    </div>
  );
}
